// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Project {
  ProjectID               String   @id @default(auto()) @map("_id") @db.ObjectId
  ProjectTitle            String
  ProjectDepartment       String
  ProjectDescription      String
  ProjectRelevantFiles    String
  ProjectRelevantLinks    String
  ProjectExistingStudents String?
  ProjectDeadline         String
  // Professor               Professor? @relation(fields: [professorId], references: [id])
  // professorId             String?    @db.ObjectId
  // Student                 Student?   @relation(fields: [studentId], references: [id])
  // studentId               String?    @db.ObjectId
}

model Task {
  TaskID                 String   @id @default(auto()) @map("_id") @db.ObjectId
  TaskTitle              String
  TaskDescription        String
  TaskStatus           String?
  TaskRelevantFiles      String
  TaskRelevantLinks      String
  TaskSubmissionDeadline String
  // Student               Student?   @relation(fields: [studentId], references: [id])
  // studentId             String?    @db.ObjectId
  // Professor             Professor? @relation(fields: [professorId], references: [id])
  // professorId           String?    @db.ObjectId
}

model Group {
  GroupID          String    @id @default(auto()) @map("_id") @db.ObjectId
  GroupName        String
  GroupDescription String
  GroupCreatedOn   DateTime?
  GroupMembers     String?
  GroupStudents    String?
  GroupProfessors  String?
  // Professor               Professor? @relation(fields: [professorId], references: [id])
  // professorId             String?    @db.ObjectId
  // Student                 Student?   @relation(fields: [studentId], references: [id])
  // studentId               String?    @db.ObjectId
}

model Student {
  StudentID               String  @id @default(auto()) @map("_id") @db.ObjectId
  StudentName             String
  StudentEnrolmentNumber  String  @unique
  StudentStudyBranch      String
  StudentStudyYear        String
  StudentContactNumber    String
  StudentInstituteEmailID String  @unique
  // StudentPersonalEmailID  String? @unique
  StudentHashedPassword   String?
  StudentDigitalSignature String?
  // StudentProjects            Project[]
  // StudentTasks               Task[]
  // StudentDissertation        Dissertation @relation(fields: [dissertationDissertationID], references: [DissertationID])
  // dissertationDissertationID String       @db.ObjectId
}

model Professor {
  ProfessorID                 String @id @default(auto()) @map("_id") @db.ObjectId
  ProfessorName               String
  ProfessorRegistrationNumber String @unique
  ProfessorDepartment         String
  ProfessorInstituteEmailID   String @unique
  ProfessorPersonalEmailID    String @unique
  ProfessorHashedPassword     String?
  ProfessorAreaOfInterest     String?
  ProfessorDigitalSignature   String?
  //   ProfessorProjects           Project[]
  //   ProfessorTasks              Task[]
  //   ProfessorDissertations      Dissertation[]
}

model Document {
  DocumentID        String   @id @default(auto()) @map("_id") @db.ObjectId
  DocumentName      String
  DocumentCreatedOn DateTime?
  DocumentIsPublic  Boolean?
}

model Dissertation {
  DissertationID            String @id @default(auto()) @map("_id") @db.ObjectId
  DissertationTitle         String
  DissertationDescription   String
  DissertationDepartment    String
  DissertationProfessor     String
  DissertationRelevantFiles String
  DissertationRelevantLinks String
  // Student                   Student[]
  // Professor                 Professor? @relation(fields: [professorId], references: [id])
  // professorId               String?    @db.ObjectId
}

model DAPC {
  DAPCID                 String @id @default(auto()) @map("_id") @db.ObjectId
  DAPCName               String
  DAPCRegistrationNumber String @unique
  DAPCDepartment         String
  DAPCInstituteEmailID   String @unique
  DAPCPersonalEmailID    String @unique
  DAPCHashedPassword     String
  DAPCDigitalSignature   String
}

model HOD {
  HODID                 String @id @default(auto()) @map("_id") @db.ObjectId
  HODName               String
  HODRegistrationNumber String @unique
  HODDepartment         String
  HODInstituteEmailID   String @unique
  HODPersonalEmailID    String @unique
  HODHashedPassword     String
  HODDigitalSignature   String
}
